#pragma once
typedef	int				int32;
typedef	unsigned int	_ui32;

typedef _ui32 DCAM_IDSTR;
DCAM_IDSTR DCAM_IDSTR_BUS = 0x04000101,
DCAM_IDSTR_CAMERAID = 0x04000102,
DCAM_IDSTR_VENDOR = 0x04000103,
DCAM_IDSTR_MODEL = 0x04000104,
DCAM_IDSTR_CAMERAVERSION = 0x04000105,
DCAM_IDSTR_DRIVERVERSION = 0x04000106,
DCAM_IDSTR_MODULEVERSION = 0x04000107,
DCAM_IDSTR_DCAMAPIVERSION = 0x04000108,

DCAM_IDSTR_CAMERA_SERIESNAME = 0x0400012c,

DCAM_IDSTR_OPTICALBLOCK_MODEL = 0x04001101,
DCAM_IDSTR_OPTICALBLOCK_ID = 0x04001102,
DCAM_IDSTR_OPTICALBLOCK_DESCRIPTION = 0x04001103,
DCAM_IDSTR_OPTICALBLOCK_CHANNEL_1 = 0x04001104,
DCAM_IDSTR_OPTICALBLOCK_CHANNEL_2 = 0x04001105;

typedef _ui32 DCAMAPI_INITOPTION;
DCAMAPI_INITOPTION DCAMAPI_INITOPTION_APIVER__LATEST = 0x00000001,
DCAMAPI_INITOPTION_APIVER__4_0 = 0x00000400,
DCAMAPI_INITOPTION_MULTIVIEW__DISABLE = 0x00010002,
DCAMAPI_INITOPTION_ENDMARK = 0x00000000;

typedef _ui32 DCAMCAP_STATUS;
DCAMCAP_STATUS DCAMCAP_STATUS_ERROR = 0x0000,
DCAMCAP_STATUS_BUSY = 0x0001,
DCAMCAP_STATUS_READY = 0x0002,
DCAMCAP_STATUS_STABLE = 0x0003,
DCAMCAP_STATUS_UNSTABLE = 0x0004;

typedef _ui32 DCAM_PIXELTYPE;
DCAM_PIXELTYPE DCAM_PIXELTYPE_MONO8 = 0x00000001,
DCAM_PIXELTYPE_MONO16 = 0x00000002,
DCAM_PIXELTYPE_MONO12 = 0x00000003,

DCAM_PIXELTYPE_RGB24 = 0x00000021,
DCAM_PIXELTYPE_RGB48 = 0x00000022,
DCAM_PIXELTYPE_BGR24 = 0x00000029,
DCAM_PIXELTYPE_BGR48 = 0x0000002a,

DCAM_PIXELTYPE_NONE = 0x00000000;

typedef _ui32 DCAMDEV_CAPDOMAIN;
DCAMDEV_CAPDOMAIN DCAMDEV_CAPDOMAIN__DCAMDATA = 0x00000001,
DCAMDEV_CAPDOMAIN__FRAMEOPTION = 0x00000002,
DCAMDEV_CAPDOMAIN__FUNCTION = 0x00000000;

typedef _ui32 DCAMDEV_CAPFLAG;
DCAMDEV_CAPFLAG DCAMDEV_CAPFLAG_FRAMESTAMP = 0x00000001,
DCAMDEV_CAPFLAG_TIMESTAMP = 0x00000002,
DCAMDEV_CAPFLAG_CAMERASTAMP = 0x00000004,
DCAMDEV_CAPFLAG_NONE = 0x00000000;


typedef _ui32 DCAMDATA_OPTION;
//DCAMDATA_OPTION DCAMDATA_OPTION__VIEW_ALL =  DCAMBUF_FRAME_OPTION__VIEW_ALL,
//DCAMDATA_OPTION__VIEW_1 =  DCAMBUF_FRAME_OPTION__VIEW_1,
//DCAMDATA_OPTION__VIEW_2 = DCAMBUF_FRAME_OPTION__VIEW_2,
//DCAMDATA_OPTION__VIEW_3 = DCAMBUF_FRAME_OPTION__VIEW_3,
//DCAMDATA_OPTION__VIEW_4 = DCAMBUF_FRAME_OPTION__VIEW_4,
//
//DCAMDATA_OPTION__VIEW__STEP = DCAMBUF_FRAME_OPTION__VIEW__STEP,
//DCAMDATA_OPTION__VIEW__MASK = DCAMBUF_FRAME_OPTION__VIEW__MASK;

typedef _ui32 DCAMDATA_KIND;
DCAMDATA_KIND DCAMDATA_KIND__REGION = 0x00000001,
DCAMDATA_KIND__LUT = 0x00000002,
DCAMDATA_KIND__NONE = 0x00000000;

typedef _ui32 DCAMDATA_REGIONTYPE;
DCAMDATA_REGIONTYPE DCAMDATA_REGIONTYPE__BYTEMASK = 0x00000001,
DCAMDATA_REGIONTYPE__RECT16ARRAY = 0x00000002,

//DCAMDATA_REGIONTYPE__ACCESSREADY = DCAMDATA_ATTRIBUTE__ACCESSREADY,
//DCAMDATA_REGIONTYPE__ACCESSBUSY = DCAMDATA_ATTRIBUTE__ACCESSBUSY,
//DCAMDATA_REGIONTYPE__HASVIEW = DCAMDATA_ATTRIBUTE__HASVIEW,

DCAMDATA_REGIONTYPE__BODYMASK = 0x00FFFFFF,
//DCAMDATA_REGIONTYPE__ATTRIBUTEMASK = DCAMDATA_ATTRIBUTE__MASK,

DCAMDATA_REGIONTYPE__NONE = 0x00000000;

//typedef _ui32 DCAMDATA_LUTTYPE;
//DCAMDATA_LUTTYPE DCAMDATA_LUTTYPE__SEGMENTED_LINEAR = 0x00000001,
//DCAMDATA_LUTTYPE__MONO16 = 0x00000002,	// reserved
//
//DCAMDATA_LUTTYPE__ACCESSREADY = DCAMDATA_ATTRIBUTE__ACCESSREADY,
//DCAMDATA_LUTTYPE__ACCESSBUSY = DCAMDATA_ATTRIBUTE__ACCESSBUSY,
//
//DCAMDATA_LUTTYPE__BODYMASK = 0x00FFFFFF,
//DCAMDATA_LUTTYPE__ATTRIBUTEMASK = DCAMDATA_ATTRIBUTE__MASK,
//
//DCAMDATA_LUTTYPE__NONE = 0x00000000;

typedef _ui32 DCAMDATA_LUTTYPE;
DCAMDATA_LUTTYPE DCAMWAIT_CAPEVENT_TRANSFERRED = 0x0001,
DCAMWAIT_CAPEVENT_FRAMEREADY = 0x0002,	/* all modules support	*/
DCAMWAIT_CAPEVENT_CYCLEEND = 0x0004,	/* all modules support	*/
DCAMWAIT_CAPEVENT_EXPOSUREEND = 0x0008,
DCAMWAIT_CAPEVENT_STOPPED = 0x0010,

DCAMWAIT_RECEVENT_STOPPED = 0x0100,
DCAMWAIT_RECEVENT_WARNING = 0x0200,
DCAMWAIT_RECEVENT_MISSED = 0x0400,
DCAMWAIT_RECEVENT_DISKFULL = 0x1000,
DCAMWAIT_RECEVENT_WRITEFAULT = 0x2000,
DCAMWAIT_RECEVENT_SKIPPED = 0x4000;

typedef _ui32 DCAMBUF_ATTACHKIND;
DCAMBUF_ATTACHKIND DCAMBUF_ATTACHKIND_TIMESTAMP = 1,
DCAMBUF_ATTACHKIND_FRAMESTAMP = 2,

DCAMBUF_ATTACHKIND_PRIMARY_TIMESTAMP = 3,
DCAMBUF_ATTACHKIND_PRIMARY_FRAMESTAMP = 4,

DCAMBUF_ATTACHKIND_FRAME = 0;


typedef _ui32 DCAMBUF_FRAME_OPTION;
DCAMBUF_FRAME_OPTION DCAMBUF_FRAME_OPTION__VIEW_ALL = 0x00000000,
DCAMBUF_FRAME_OPTION__VIEW_1 = 0x00100000,
DCAMBUF_FRAME_OPTION__VIEW_2 = 0x00200000,
DCAMBUF_FRAME_OPTION__VIEW_3 = 0x00300000,
DCAMBUF_FRAME_OPTION__VIEW_4 = 0x00400000,

DCAMBUF_FRAME_OPTION__PROC_HIGHCONTRAST = 0x00000010,

DCAMBUF_FRAME_OPTION__VIEW__STEP = 0x00100000,
DCAMBUF_FRAME_OPTION__VIEW__MASK = 0x00F00000,
DCAMBUF_FRAME_OPTION__PROC__MASK = 0x00000FF0;

typedef _ui32 DCAMBUF_METADATAOPTION;
DCAMBUF_METADATAOPTION DCAMBUF_METADATAOPTION__VIEW_ALL = DCAMBUF_FRAME_OPTION__VIEW_ALL,
DCAMBUF_METADATAOPTION__VIEW_1 = DCAMBUF_FRAME_OPTION__VIEW_1,
DCAMBUF_METADATAOPTION__VIEW_2 = DCAMBUF_FRAME_OPTION__VIEW_2,
DCAMBUF_METADATAOPTION__VIEW_3 = DCAMBUF_FRAME_OPTION__VIEW_3,
DCAMBUF_METADATAOPTION__VIEW_4 = DCAMBUF_FRAME_OPTION__VIEW_4,
DCAMBUF_METADATAOPTION__VIEW__STEP = DCAMBUF_FRAME_OPTION__VIEW__STEP,
DCAMBUF_METADATAOPTION__VIEW__MASK = DCAMBUF_FRAME_OPTION__VIEW__MASK;

typedef _ui32 DCAMBUF_PROCTYPE;
DCAMBUF_PROCTYPE DCAMBUF_PROCTYPE__HIGHCONTRASTMODE = DCAMBUF_FRAME_OPTION__PROC_HIGHCONTRAST,
DCAMBUF_PROCTYPE__NONE = 0x00000000;

typedef _ui32 DCAMREC_STATUSFLAG;
DCAMREC_STATUSFLAG DCAMREC_STATUSFLAG_NONE = 0x00000000,
DCAMREC_STATUSFLAG_RECORDING = 0x00000001;

typedef _ui32 DCAMREC_FRAME_OPTION;
DCAMREC_FRAME_OPTION DCAMREC_FRAME_OPTION__VIEW_CURRENT = 0x00000000,
DCAMREC_FRAME_OPTION__VIEW_1 = 0x00100000,
DCAMREC_FRAME_OPTION__VIEW_2 = 0x00200000,
DCAMREC_FRAME_OPTION__VIEW_3 = 0x00300000,
DCAMREC_FRAME_OPTION__VIEW_4 = 0x00400000,

DCAMREC_FRAME_OPTION__PROC_HIGHCONTRAST = 0x00000010,

DCAMREC_FRAME_OPTION__VIEW__STEP = 0x00100000,
DCAMREC_FRAME_OPTION__VIEW__MASK = 0x00F00000,
DCAMREC_FRAME_OPTION__PROC__MASK = 0x00000FF0;

typedef _ui32 DCAMREC_METADATAOPTION;
DCAMREC_METADATAOPTION DCAMREC_METADATAOPTION__LOCATION_FRAME = 0x00000000,
DCAMREC_METADATAOPTION__LOCATION_FILE = 0x01000000,
DCAMREC_METADATAOPTION__LOCATION_SESSION = 0x02000000,
DCAMREC_METADATAOPTION__LOCATION__MASK = 0xFF000000;

typedef _ui32 DCAMBUF_METADATAKIND;
DCAMBUF_METADATAKIND DCAMBUF_METADATAKIND_TIMESTAMPS = 0x00010000,
DCAMBUF_METADATAKIND_FRAMESTAMPS = 0x00020000;

typedef _ui32 DCAMREC_METADATAKIND;
DCAMREC_METADATAKIND DCAMREC_METADATAKIND_USERDATATEXT = 0x00000001,
DCAMREC_METADATAKIND_USERDATABIN = 0x00000002,
DCAMREC_METADATAKIND_TIMESTAMPS = 0x00010000,
DCAMREC_METADATAKIND_FRAMESTAMPS = 0x00020000;

typedef _ui32 DCAM_CODEPAGE;
DCAM_CODEPAGE DCAM_CODEPAGE__SHIFT_JIS = 932,		// Shift JIS
DCAM_CODEPAGE__UTF16_LE = 1200,		// UTF-16 (Little Endian)
DCAM_CODEPAGE__UTF16_BE = 1201,		// UTF-16 (Big Endian)
DCAM_CODEPAGE__UTF7 = 65000,	// UTF-7 translation
DCAM_CODEPAGE__UTF8 = 65001,	// UTF-8 translation
DCAM_CODEPAGE__NONE = 0x00000000;

typedef _ui32 DCAM_CODEPAGE;
DCAM_CODEPAGE DCAMCAP_TRANSFERKIND_FRAME = 0;

typedef _ui32 DCAMCAP_START;
DCAMCAP_START DCAMCAP_START_SEQUENCE = -1,
DCAMCAP_START_SNAP = 0;


typedef _ui32 DCAMERR;
DCAMERR DCAMERR_BUSY = 0x80000101,/*		API cannot process in busy state.		*/
DCAMERR_NOTREADY = 0x80000103,/*		API requires ready state.				*/
DCAMERR_NOTSTABLE = 0x80000104,/*		API requires stable or unstable state.	*/
DCAMERR_UNSTABLE = 0x80000105,/*		API does not support in unstable state.	*/
DCAMERR_NOTBUSY = 0x80000107,/*		API requires busy state.				*/

DCAMERR_EXCLUDED = 0x80000110,/*		some resource is exclusive and already used	*/

DCAMERR_COOLINGTROUBLE = 0x80000302,/*		something happens near cooler */
DCAMERR_NOTRIGGER = 0x80000303,/*		no trigger when necessary. Some camera supports this error. */
DCAMERR_TEMPERATURE_TROUBLE = 0x80000304,/*		camera warns its temperature */
DCAMERR_TOOFREQUENTTRIGGER = 0x80000305,/*		input too frequent trigger. Some camera supports this error. */

									/* wait error */
DCAMERR_ABORT = 0x80000102,/*		abort process			*/
DCAMERR_TIMEOUT = 0x80000106,/*		timeout					*/
DCAMERR_LOSTFRAME = 0x80000301,/*		frame data is lost		*/
DCAMERR_MISSINGFRAME_TROUBLE = 0x80000f06,/*		frame is lost but reason is low lever driver's bug */
DCAMERR_INVALIDIMAGE = 0x80000321,/*		hpk format data is invalid data	*/

									/* initialization error */
DCAMERR_NORESOURCE = 0x80000201,/*		not enough resource except memory	*/
DCAMERR_NOMEMORY = 0x80000203,/*		not enough memory		*/
DCAMERR_NOMODULE = 0x80000204,/*		no sub module			*/
DCAMERR_NODRIVER = 0x80000205,/*		no driver				*/
DCAMERR_NOCAMERA = 0x80000206,/*		no camera				*/
DCAMERR_NOGRABBER = 0x80000207,/*		no grabber				*/
DCAMERR_NOCOMBINATION = 0x80000208,/*		no combination on registry */

DCAMERR_FAILOPEN = 0x80001001,/* DEPRECATED */
DCAMERR_INVALIDMODULE = 0x80000211,/*		dcam_init() found invalid module */
DCAMERR_INVALIDCOMMPORT = 0x80000212,/*		invalid serial port		*/
DCAMERR_FAILOPENBUS = 0x81001001,/*		the bus or driver are not available	*/
DCAMERR_FAILOPENCAMERA = 0x82001001,/*		 camera report error during opening	*/

								/* calling error */
DCAMERR_INVALIDCAMERA = 0x80000806,/*		invalid camera		 */
DCAMERR_INVALIDHANDLE = 0x80000807,/*		invalid camera handle	*/
DCAMERR_INVALIDPARAM = 0x80000808,/*		invalid parameter		*/
DCAMERR_INVALIDVALUE = 0x80000821,/*		invalid property value	*/
DCAMERR_OUTOFRANGE = 0x80000822,/*		value is out of range	*/
DCAMERR_NOTWRITABLE = 0x80000823,/*		the property is not writable	*/
DCAMERR_NOTREADABLE = 0x80000824,/*		the property is not readable	*/
DCAMERR_INVALIDPROPERTYID = 0x80000825,/*		the property id is invalid	*/
DCAMERR_NEWAPIREQUIRED = 0x80000826,/*		old API cannot present the value because only new API need to be used */
DCAMERR_WRONGHANDSHAKE = 0x80000827,/*		this error happens DCAM get error code from camera unexpectedly */
DCAMERR_NOPROPERTY = 0x80000828,/*		there is no altenative or influence id, or no more property id */
DCAMERR_INVALIDCHANNEL = 0x80000829,/*		the property id specifies channel but channel is invalid */
DCAMERR_INVALIDVIEW = 0x8000082a,/*		the property id specifies channel but channel is invalid */
DCAMERR_INVALIDSUBARRAY = 0x8000082b,/*		the combination of subarray values are invalid. e.g. DCAM_IDPROP_SUBARRAYHPOS + DCAM_IDPROP_SUBARRAYHSIZE is greater than the number of horizontal pixel of sensor. */
DCAMERR_ACCESSDENY = 0x8000082c,/*		the property cannot access during this DCAM STATUS */
DCAMERR_NOVALUETEXT = 0x8000082d,/*		the property does not have value text */
DCAMERR_WRONGPROPERTYVALUE = 0x8000082e,/*		at least one property value is wrong */
DCAMERR_DISHARMONY = 0x80000830,/*		the paired camera does not have same parameter */
DCAMERR_FRAMEBUNDLESHOULDBEOFF = 0x80000832,/*	framebundle mode should be OFF under current property settings */
DCAMERR_INVALIDFRAMEINDEX = 0x80000833,/*		the frame index is invalid  */
DCAMERR_INVALIDSESSIONINDEX = 0x80000834,/*		the session index is invalid */
DCAMERR_NOCORRECTIONDATA = 0x80000838,/*		not take the dark and shading correction data yet.*/
DCAMERR_CHANNELDEPENDENTVALUE = 0x80000839,/*	each channel has own property value so can't return overall property value. */
DCAMERR_VIEWDEPENDENTVALUE = 0x8000083a,/*		each view has own property value so can't return overall property value. */
DCAMERR_NOTSUPPORT = 0x80000f03,/*		camera does not support the function or property with current settings */

								/* camera or bus trouble */
DCAMERR_FAILREADCAMERA = 0x83001002,/*		failed to read data from camera	*/
DCAMERR_FAILWRITECAMERA = 0x83001003,/*		failed to write data to the camera */
DCAMERR_CONFLICTCOMMPORT = 0x83001004,/*		conflict the com port name user set	*/
DCAMERR_OPTICS_UNPLUGGED = 0x83001005,/* 	Optics part is unplugged so please check it. */
DCAMERR_FAILCALIBRATION = 0x83001006,/*		fail calibration	*/

										/* 0x84000100 - 0x840001FF, DCAMERR_INVALIDMEMBER_x */
DCAMERR_INVALIDMEMBER_3 = 0x84000103,/*		3th member variable is invalid value*/
DCAMERR_INVALIDMEMBER_5 = 0x84000105,/*		5th member variable is invalid value*/
DCAMERR_INVALIDMEMBER_7 = 0x84000107,/*		7th member variable is invalid value*/
DCAMERR_INVALIDMEMBER_8 = 0x84000108,/*		7th member variable is invalid value*/
DCAMERR_INVALIDMEMBER_9 = 0x84000109,/*		9th member variable is invalid value*/
DCAMERR_FAILEDOPENRECFILE = 0x84001001,/*		DCAMREC failed to open the file	*/
DCAMERR_INVALIDRECHANDLE = 0x84001002,/*		DCAMREC is invalid handle */
DCAMERR_FAILEDWRITEDATA = 0x84001003,/*		DCAMREC failed to write the data	*/
DCAMERR_FAILEDREADDATA = 0x84001004,/*		DCAMREC failed to read the data	*/
DCAMERR_NOWRECORDING = 0x84001005,/*		DCAMREC is recording data now	*/
DCAMERR_WRITEFULL = 0x84001006,/*		DCAMREC writes full frame of the session	*/
DCAMERR_ALREADYOCCUPIED = 0x84001007,/*		DCAMREC handle is already occupied by other HDCAM	*/
DCAMERR_TOOLARGEUSERDATASIZE = 0x84001008,/*		DCAMREC is set the large value to user data size	*/
DCAMERR_INVALIDWAITHANDLE = 0x84002001,/*		DCAMWAIT is invalid handle	*/
DCAMERR_NEWRUNTIMEREQUIRED = 0x84002002,/*		DCAM Module Version is older than the version that the camera requests	*/
DCAMERR_VERSIONMISMATCH = 0x84002003,/*		Camre returns the error on setting parameter to limit version	*/
DCAMERR_RUNAS_FACTORYMODE = 0x84002004,/*		Camera is running as a factory mode */
DCAMERR_IMAGE_UNKNOWNSIGNATURE = 0x84003001,/*	sigunature of image header is unknown or corrupted	*/
DCAMERR_IMAGE_NEWRUNTIMEREQUIRED = 0x84003002,/* version of image header is newer than version that used DCAM supports	*/
DCAMERR_IMAGE_ERRORSTATUSEXIST = 0x84003003,/*	image header stands error status	*/
DCAMERR_IMAGE_HEADERCORRUPTED = 0x84004004,/*	image header value is strange	*/
DCAMERR_IMAGE_BROKENCONTENT = 0x84004005,/*	image content is corrupted	*/

											/* calling error for DCAM-API 2.1.3 */
DCAMERR_UNKNOWNMSGID = 0x80000801,/*		unknown message id		*/
DCAMERR_UNKNOWNSTRID = 0x80000802,/*		unknown string id		*/
DCAMERR_UNKNOWNPARAMID = 0x80000803,/*		unkown parameter id		*/
DCAMERR_UNKNOWNBITSTYPE = 0x80000804,/*		unknown bitmap bits type			*/
DCAMERR_UNKNOWNDATATYPE = 0x80000805,/*		unknown frame data type				*/

										/* internal error */
DCAMERR_NONE = 0,		/*		no error, nothing to have done		*/
DCAMERR_INSTALLATIONINPROGRESS = 0x80000f00,/*	installation progress				*/
DCAMERR_UNREACH = 0x80000f01,/*		internal error						*/
DCAMERR_UNLOADED = 0x80000f04,/*		calling after process terminated	*/
DCAMERR_THRUADAPTER = 0x80000f05,/*											*/
DCAMERR_NOCONNECTION = 0x80000f07,/*		HDCAM lost connection to camera		*/

DCAMERR_NOTIMPLEMENT = 0x80000f02,/*		not yet implementation				*/

DCAMERR_APIINIT_INITOPTIONBYTES = 0xa4010003,/*	"API_INIT has a invalid parameter is initoptionbytes!"	*/
DCAMERR_APIINIT_INITOPTION = 0xa4010004,/*	"API_INIT has a invalid parameter is initoption!"	*/

DCAMERR_INITOPTION_COLLISION_BASE = 0xa401C000,
DCAMERR_INITOPTION_COLLISION_MAX = 0xa401FFFF,

/*	Between DCAMERR_INITOPTION_COLLISION_BASE and DCAMERR_INITOPTION_COLLISION_MAX means there is collision with initoption in DCAMAPI_INIT. */
/*	The value "(error code) - DCAMERR_INITOPTION_COLLISION_BASE" indicates the index which second INITOPTION group happens. */

/* success */
DCAMERR_SUCCESS = 1;





















